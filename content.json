{"meta":{"title":"calmet's Blog","subtitle":null,"description":null,"author":"calmet","url":"http://calmtree.cn"},"pages":[],"posts":[{"title":"车辆定位系统","slug":"车辆定位系统","date":"2017-12-10T13:18:53.000Z","updated":"2017-12-10T14:11:32.739Z","comments":true,"path":"2017/12/10/车辆定位系统/","link":"","permalink":"http://calmtree.cn/2017/12/10/车辆定位系统/","excerpt":"实现车辆实时位置跟踪并微信端显示使用：Arduino+GPRS.GPS.module+raspberry.PI","text":"实现车辆实时位置跟踪并微信端显示使用：Arduino+GPRS.GPS.module+raspberry.PI源码参见github:https://github.com/calmetree/carTrail.git github 源码说明：server.py/updateCarPOs.py 利用树莓派做服务器接收GPS位置信息 showCarPos.py 后端准备好当天的位置数据到html静态文件中（历史数据通过mysql数据库保存） showCarPos.html静态文件，利用前端百度api绘出当天车俩轨迹地图，通过树莓派假设的nginx静态服务器提供外部访问。 carPos.ino 为arduino控制GRPS.GPS模块对应源代码（可通过短信实时通知，并通过手机短信控制实时更新系统参数） 搭建系统使用到的各种神器拍图（附UART/及串接取电接线）arduino跟GPS/GPRS模块(UART连接)GPRS/GPS模块装盒子里特写封装到盒子里，丑陋的线都遮挡起来车上点烟器取电隐蔽的天线位置，，GPS信号有点影响，但整体还好，为了不影响美观，不想到处拉线（GPS的天线拉到前挡风玻璃下面，效果很好，为了保持整洁，，都藏起来，，哈哈） 最终在手机上看到车辆轨迹效果图","categories":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"DSP特点漫谈","slug":"DSP特点漫谈","date":"2017-11-21T09:15:33.000Z","updated":"2017-12-10T08:49:30.052Z","comments":true,"path":"2017/11/21/DSP特点漫谈/","link":"","permalink":"http://calmtree.cn/2017/11/21/DSP特点漫谈/","excerpt":"本文准备从下面几个方面介绍一下DSP 硬件结构特点（架构，总线，扩展，加速器，中断） 指令特点 软件系统RTOS特点 内存管理 陷阱及定点注意事项顺序可能会调整","text":"本文准备从下面几个方面介绍一下DSP 硬件结构特点（架构，总线，扩展，加速器，中断） 指令特点 软件系统RTOS特点 内存管理 陷阱及定点注意事项顺序可能会调整 硬件结构特点（架构，总线，扩展，加速器，中断） DSP: 总线多，存储分离（哈佛结构VS冯诺依曼结构）当前主流CPU架构（比如PC）实际上在内存里，指令和数据是在一起的。而在CPU内的缓存中，还是会区分指令缓存和数据缓存，最终执行的时候，指令和数据是从两个不同的地方出来的。你可以理解为在CPU外部，采用的是冯诺依曼模型，而在CPU内部用的是哈佛结构。 大部分的DSP都没有缓存，因而直接就是哈佛结构。哈佛结构设计复杂，但效率高。冯诺依曼结构则比较简单，但也比较慢。CPU厂商为了提高处理速度，在CPU内增加了高速缓存。也基于同样的目的，区分了指令缓存和数据缓存。 “哈佛结构设计复杂，但效率高。冯诺依曼结构则比较简单，但也比较慢。”下面是CEVA x1622的结构框图CEVA TL420的结构图CEVA xc321的结构图最后是古老的teaklite的结构图 从架构图上看，数据总线，代码总线是分立得比较清晰的再看看上面几款DSP的寄存器配置设计情况 结合前面的架构，以及下面的寄存器配置,X1622的数据处理能明显强出很多！软件系统“RTOS”特点考虑如下情况，存在4个不同高低优先级的任务（分别从高到低为1，2，3，4），任务1和任务4会使用同一不可抢占资源A，比如光驱/串口。正常能胜任此类任务管理的RTOS系统，需要像如下调度：CEVA DSP可以port FreeRTOS作为系统，但是会裁剪掉很多功能模块不擅长复杂场景调度，但支持优先级抢占，实时！之前的场景，通常DSP只能调度出如下结果：但是：Task4/1如果是对同一资源的操作，映射为同一个中断事件，则能解决问题！ 内存管理对于数据和代码分开的哈弗结构，要实现动态内存管理（回收）机制，复杂度太高。一般不建议在DSP的阉割OS上做此类“操作”，而采用预先规划，划分的机制！即：通常不支持malloc/free操作看个实例： 内存管理—swap/overlay基于数据和代码分开存放/管理的特征，将数据段作为介质存放代码，运行代码前load所需代码，或者反之 指令特点 VSID-SMID(VLIW: Very Long Instruction Word, SIMD: Single Instruction Multiple Data)长指令，多数据单指令 对密集乘法的支持(MAC)专门的硬件实现单周期乘法。专门的累加器寄存器处理多个乘积和，累加寄存器比其他寄存器宽，增加额外Bits避免溢出.(但是需要注意编程陷阱) 零开销循环DSP算法普遍共同点特点：大多数处理时间花在执行较小的循环上。 针对行业应用提供专用特殊指令，节省执行时间。 流水线并行操作(多少并行依赖于具体的DSP实现) 通常只支持定点操作，需要对代码进行定点化。看个并行的实例前后规划合理，可以保持一拍并行做4个字节的乘累加并且不中断！累加寄存器符号扩展编程陷阱（例子X1622）定点化注意事项定点：通过整数来表示小数和整数• 符号位：0表示正数，1表示负数。• 整数部分：小数点左边的数。• 小数部分：小数点右边的数。1.. 为了防止数据损失，在未知数据确定范围的情况下，通常左顶格操作，保证最大精度 2.. Floor函数，永远向下取整还是绝对值靠0取整？需要特别注意（-1/x永远为-1的问题）， 3.. 除法转移位和乘法4.. 查表5.. 多项式，基数展开逼近6.. ……","categories":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"setup RaspberryPi","slug":"setup-RaspberryPi","date":"2017-11-14T14:46:29.000Z","updated":"2017-11-14T15:02:19.664Z","comments":true,"path":"2017/11/14/setup-RaspberryPi/","link":"","permalink":"http://calmtree.cn/2017/11/14/setup-RaspberryPi/","excerpt":"树莓派 重新扫灰前段时间，因为TF卡突然出现故障，树莓派down机了，上面的资料都没有恢复出来（哭），，，，这次准备重新开场！后面考虑TF+U盘的机制。防止内存卡再出故障","text":"树莓派 重新扫灰前段时间，因为TF卡突然出现故障，树莓派down机了，上面的资料都没有恢复出来（哭），，，，这次准备重新开场！后面考虑TF+U盘的机制。防止内存卡再出故障 setup 过程记录一下，给自己，也给需要的同行们，省点精力 1. Down right image，burn to SD(stretch_lite版,简书) 2. Enable ssh：create ssh file 3. Ipscan，发现树莓派IP 4. 启用root，并设置密码：sudo passwd root，编辑:/etc/ssh/sshd_config PermitRootLogin一行为yes 5. vi /etc/dhcpcd.conf：配置静态IP，配置网关，路由 6. 更改apt源 修改 sources.list 将 mirrordirector.raspbian.org 替换为 mirrors.aliyun.com/raspbian/ 。 修改 raspi.list 实际修改是，将 archive.raspberrypi.org 替换为 mirrors.aliyun.com 然后执行 apt-get update &amp;&amp; apt-get upgrade -y 7. 安装图形界面 pixel/GUI 8. 安装远程图形界面：apt-get install xrdp 9. 配置samba（利用这个装花生壳） 10. 配置花生壳客户端/配置内网穿透 11. 配置数据库服务","categories":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"扯扯NB-IOT","slug":"扯扯NB-IOT","date":"2017-11-08T13:13:40.000Z","updated":"2017-11-08T14:02:08.509Z","comments":true,"path":"2017/11/08/扯扯NB-IOT/","link":"","permalink":"http://calmtree.cn/2017/11/08/扯扯NB-IOT/","excerpt":"今年是AI技术大爆发元年，但通信领域也不甘寂寞，物联网技术经过一段时间的累计，从需求侧开始撬动研发投入。NB-IOT就是典型的例子之一。","text":"今年是AI技术大爆发元年，但通信领域也不甘寂寞，物联网技术经过一段时间的累计，从需求侧开始撬动研发投入。NB-IOT就是典型的例子之一。 事实上，本文并不打算详细论述NB-IOT的各个细节。下面分享几张对理解NB能起到关键引导的几张图 NB-IOT的3种布网模式三种布局模式对于终端物理层而言，基本上没什么区别，不过RF特性会有所不同。 下行基本工作时序遵守NPDCCH+NPDSCH+重传的模式 上行基本工作时序也是NPDCCH+NPUSCH+重复传输，不过由于需要终端跟网络侧对齐timing，因此跟下行稍稍有区别的是，连续发送久了，需要进入下行接收同步GAP。 深刻理解了上面两个图，思考一下背后的因素，会发现什么？ 半双工！不同于传统的LTE，在NB中，通信按照半双工的方式进行，同一时刻只有DL或者UP，NPDCCH需要占用一个TTI。这样对于NPDCCH的监听而言，则有了新的需求： NB中的新招式 NB中新的资源布局3.75K子载波，对于NB中最大的更新，个人觉得莫过于上行3.75K子载波的工作方式。这个子载波格式的引入，对于上行发送的资源分配方式，信号生成复杂性都带来了新的麻烦。而对于接收端，则更具有挑战性，或许这也是网络迟迟不更新，代价比预想的高出许多的因素之一。 NB 的竞争者事实上，NB才是后来的，被幕后各种推手推动。在此之前有不少类似的技术，zigbee，sogfix，Lora都能提供类似的覆盖和功能。对于非授权频段，以及企业私有网，Lora的竞争力不容忽视，后面有空再掰掰Lora。 本着分享的精神，本文最后分享一张实际项目中使用得着的设计详图.经过实际项目验证：按照下图，实现NB的发送链路完全没有问题。拿去不谢！","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"嗯，基本会了","slug":"嗯，基本会了","date":"2017-11-07T14:47:01.000Z","updated":"2017-11-07T14:48:48.876Z","comments":true,"path":"2017/11/07/嗯，基本会了/","link":"","permalink":"http://calmtree.cn/2017/11/07/嗯，基本会了/","excerpt":"要图有图，基本上可以应付日常需要，不要为此特意付出更多精力了。","text":"要图有图，基本上可以应付日常需要，不要为此特意付出更多精力了。","categories":[],"tags":[]},{"title":"拔草","slug":"拔草","date":"2017-11-07T14:35:44.000Z","updated":"2017-11-07T14:42:58.785Z","comments":true,"path":"2017/11/07/拔草/","link":"","permalink":"http://calmtree.cn/2017/11/07/拔草/","excerpt":"心痒痒GitHub的blog很久了，终于进来拔草，hoho，来个图镇楼！","text":"心痒痒GitHub的blog很久了，终于进来拔草，hoho，来个图镇楼！","categories":[],"tags":[]},{"title":"2017完成书单","slug":"2017完成书单","date":"2017-11-05T12:35:27.000Z","updated":"2017-11-08T14:16:13.070Z","comments":true,"path":"2017/11/05/2017完成书单/","link":"","permalink":"http://calmtree.cn/2017/11/05/2017完成书单/","excerpt":"时间简史（插图本） 微信读书 感觉一般般，不如后面的“宇宙的琴弦” 宇宙的琴弦[PDF] 弦理论科普著作 B.格林 著 李泳 译 弦理论好书 看的好烧脑","text":"时间简史（插图本） 微信读书 感觉一般般，不如后面的“宇宙的琴弦” 宇宙的琴弦[PDF] 弦理论科普著作 B.格林 著 李泳 译 弦理论好书 看的好烧脑 3.荒原狼 赫尔曼.黑塞 太难度，实在读不下去，放弃。 世界上最简单的会计书 微信读书 鞋狗 微信读书 创客.新工业革命 [多看] 克里斯.安德森 好书，恨不得一口气读完 你从未真正拼过[微信读书] 领英 乡土中国【pdf已读】费孝通/著 北京大学出版社/上海人民出版社 很好！有思想有内涵 史记（蔡志忠版）多看 小人书，推荐给小朋友看不错 极简欧洲史 澳 约翰.赫斯特 译者:席玉苹 [多看] 一般 人民的名义 周梅森 [PDF] 一般 看见 柴静 微信读书 内容不是非常正能量，看到近1/3放弃摘录： 不要因为走得太远，忘了我们为什么出发（陈虻 meng 第二声） 13.Python 灰帽子中文，，看到第6章，逐渐看不懂，先停下来 Python编程快速上手 让繁琐工作自动化 [PDF] [美].AI Sweigart 王海鹏.译 不错，上手Python首选 ARDUINO程序设计基础【PDF】 陈吕洲","categories":[{"name":"学习","slug":"学习","permalink":"http://calmtree.cn/categories/学习/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://calmtree.cn/tags/生活/"}]},{"title":"图片show","slug":"图片show","date":"2017-11-05T11:36:55.000Z","updated":"2017-11-05T14:34:27.666Z","comments":true,"path":"2017/11/05/图片show/","link":"","permalink":"http://calmtree.cn/2017/11/05/图片show/","excerpt":"试试","text":"试试 姐弟好啊","categories":[],"tags":[]}]}