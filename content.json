{"meta":{"title":"calmet's Blog","subtitle":null,"description":null,"author":"calmet","url":"http://calmtree.cn"},"pages":[],"posts":[{"title":"DSP特点漫谈","slug":"DSP特点漫谈","date":"2017-11-21T09:15:33.000Z","updated":"2017-11-21T11:51:21.464Z","comments":true,"path":"2017/11/21/DSP特点漫谈/","link":"","permalink":"http://calmtree.cn/2017/11/21/DSP特点漫谈/","excerpt":"本文准备从下面几个方面介绍一下DSP 硬件结构特点（架构，总线，扩展，加速器，中断） 指令特点 软件系统RTOS特点 CEVA DSP特点顺序可能会调整","text":"本文准备从下面几个方面介绍一下DSP 硬件结构特点（架构，总线，扩展，加速器，中断） 指令特点 软件系统RTOS特点 CEVA DSP特点顺序可能会调整 硬件结构特点（架构，总线，扩展，加速器，中断）DSP芯片具有以下特点：（1）多总线结构。DSP芯片内部一般采用的是哈佛结构，其主要特点是将程序和数据存储在不同的存储空间，每个存储器独立编址，独立访问。在片内有相应的程序总线和数据总线，程序总线和数据总线可以允许同时获取指令字和操作数，而互不干涉。这意味着在一个机器周期内可以同时准备好指令和操作数，从而使数据的吞吐率提高了1倍。为了进一步提高运行速度和灵活性，DSP也采用了改进的哈佛结构和超级哈佛结构。（2）流水线操作。流水线操作技术使两个或更多不同的操作可以重叠执行，从而在不减小时钟周期的条件下缩短了每条指令的执行时间，增强了处理器的数据处理能力。要执行一条DSP指令，需要通过取指令、指令译码、取操作数和执行指令等若干阶段，每一阶段称为一级流水。DSP的流水线操作是指它的这几个阶段在程序执行过程中是重叠的，在执行本条指令的同时，下面的几条指令已依次完成了取指令、解码、取操作数的操作。（3）专用的硬件乘法器。硬件乘法器的功能是在一个指令周期内完成一次乘法运算，是DSP实现快速运算的重要保证。可以说几乎所有的DSP器件内部都有硬件乘法器。（4）特殊的DSP指令。数字信号处理器芯片为了对数字信号进行更为高效、快速的处理，专门设计了一套相应的特殊指令。这些特殊指令节省了指令的条数，缩短了指令的执行时间，提高了运算速度。（5）多机并行运行特性。DSP芯片的单机处理能力是有限的，而随着DSP芯片价格的不断降低和应用的广泛，多个DSP芯片并行处理已成为可能，可以运用这一特性，达到良好的高速实时处理的要求。（6）快速的指令周期。随着的不断发展，DSP芯片采用了CMOS技术、先进的工艺和集成电路的优化设计，工作电压的下降，使得DSP芯片的主频不断提高。这一变化将随着微电子技术的不断进步而继续提高。（7）低功耗。随着微电子产品在人类日常生活中所占得比重越来越大，DSP的应用领域得到了巨大的拓展。DSP应用这么广泛，那么降低功耗对于电力资源紧缺产生十分重要的意义。这对DSP的发展也起到了巨大的作用。（8）高的运算精度。浮点DSP提供了大的动态范围，定点DSP的字长也能达到32位，有的累加器达到40位。指令特点 DSP的特点对于没有使用过DSP的初学者来说，第一个困惑就是DSP其他的嵌入式处理器究竟有什么不同，它和单片机，ARM有什么区别。事实上，DSP也是一种嵌入式处理器，它完全可以完成单片机的功能。唯一的重要的区别在于DSP支持单时钟周期的”乘-加”运算。这几乎是所有厂家的DSP芯片的一个共有特征。几乎所有的DSP处理器的指令集中都会有一条MAC指令，这条指令可以把两个操作数从RAM中取出相乘，然后加到一个累加器中，所有这些操作都在一个时钟周期内完成。拥有这样一条指令的处理器就具备了DSP功能。具有这条指令就称之为数字信号处理器的原因在于，所有的数字信号处理算法中最为常见的算术操作就是”乘-加”。这是因为数字信号处理中大量使用了内积，或称”点积”的运算。无论是FIR滤波，FFT，信号相关，数字混频，下变频。所有这些数字信号处理的运算经常是将输入信号与一个系数表或者与一个本地参考信号相乘然后积分（累加），这就表现为将两个向量（或称序列）进行点积，在编程上就变成将输入的采样放在一个循环buffer里，本地的系数表或参考信号也放在一个buffer里，然后使用两个指针指向这两个buffer。这样就可以在一个loop里面使用一个MAC指令将二者进行点积运算。这样的点积运算对与处理器来说是最快的，因为仅需一个始终周期就可以完成一次乘加。了解DSP的这一特点后，当我们设计一个嵌入式系统时，首先要考虑处理器所实现的算法中是否有点积运算，即是否要经常进行两个数组的乘加，（记住数字滤波，相关等都表现为两个数组的点积）如果有的话，每秒要做多少次，这样就能够决定是否采用DSP，采用多高性能的DSP了。浮点与定点浮点与定点也是经常是初学者困惑的问题，在选择DSP器件的时候，是采用浮点还是采用定点，如果用定点是16位还是32位？其实这个问题和你的算法所要求的信号的动态范围有关。定点的计算不过是把一个数据当作整数来处理，通常AD采样来的都是整数，这个数相对于真实的模拟信号有一个刻度因子，大家都知道用一个16位的AD去采样一个0到5V的信号，那么AD输出的整数除以2^16再乘以5V就是对应的电压。在定点DSP中是直接对这个16位的采样进行处理，并不将它转换成以小数表示的电压，因为定点DSP无法以足够的精度表示一个小数，它只能对整数进行计算。而浮点DSP的优势在于它可以把这个采样得到的整数转换成小数表示的电压，并不损失精度（这个小数用科学记数法来表示），原因在于科学记数法可以表示很大的动态范围的一个信号，以IEEE754浮点数为例，单精度浮点格式： [31] 1位符号 [30-23]8位指数 [22-00]23位小数这样的能表示的最小的数是+-2^-149,最大的数是+-（2-2^23)2^127.动态范围为20log(最大的数/最小的数）=1667.6dB 这样大的动态范围使得我们在编程的时候几乎不必考虑乘法和累加的溢出，而如果使用定点处理器编程，对计算结果进行舍入和移位则是家常便饭，这在一定程度上会损失是精度。原因在于定点处理处理的信号的动态范围有限，比如16位定点DSP，可以表示整数范围为1-65536，其动态范围为20log(65536/1)=96dB.对于32定点DSP，动态范围为20log(2^32/1)=192dB,远小于32位ieee浮点数的1667.6dB,但是，实际上192dB对绝大多数应用所处理的信号已经足够了。由于AD转换器的位数限制，一般输入信号的动态范围都比较小，但在DSP的信号处理中，由于点积运算会使中间节点信号的动态范围增加，所以主要考虑信号处理流程中中间结果的动态范围，以及算法对中间结果的精度要求，来选择相应的DSP。另外就是浮点的DSP更易于编程，定点DSP编程中程序员要不断调整中间结果的P，Q值，实际就是不断对中间结果进行移位调整和舍入。DSP与RTOSTI的CCS提供BIOS，ADI的VDSP提供VDK，都是基于各自DSP的嵌入式多任务内核。DSP编程可以用单用C，也可以用汇编，或者二者结合，一般软件编译工具都提供了很好的支持。我不想在这里多说BIOS，VDK怎么用这在相应的文档里说的很详细。我想给初学者说说DSP的RTOS原理。用短短几段话说这个复杂的东西也是挑战！其实DSP的RTOS和基于其他处理器的通用RTOS没什么大的区别，现在几乎人人皆知的uCOSii也很容易移植到DSP上来，只要把寄存器保存与恢复部分和堆栈部分改改就可以。一般在用BIOS和VDK之前，先看看操作系统原理的书比较好。uCOS那本书也不错。BIOS和VDK其实是一个RTOS内核函数集，DSP的应用程序会和这些函数连接成一个可执行文件。其实实现一个简单的多任务内核并不复杂，首先定义好内核的各种数据结构，然后写一个scheduler函数，功能是从所有就绪任务中（通过查找就绪任务队列或就绪任务表）找出优先级最高的任务，并恢复其执行。然后在此基础上写几个用于任务间通信的函数就可以了，比如event,message box,等等。RTOS一般采用抢先式的任务调度方式，举例说当任务A等待的资源available的时候,DSP会执行一个任务调度函数scheduler,这个函数会检查当前任务是否比任务A优先级低，如果是的话，就会把它当前挂起，然后把任务A保存在堆栈里寄存器值全部pop到DSP处理器中(这就是所谓的任务现场恢复）。接着scheduler还会把从堆栈中取出任务A挂起时的程序执行的地址，pop到PC，使任务A继续执行。这样当前 任务就被任务A抢先了。使用RTOS之后，每个任务都会有一个主函数，这个函数的起始地址就是该任务的入口。一般每个任务的主函数里有一个死循环，这个循环使该任务周期地执行，完成一部分算法模块的功能，其实这个函数跟普通函数没任何区别，类似于C语言中的main函数。一个任务创建的时候，RTOS会把这个函数入口地址压入任务的堆栈中，好象这个函数（任务）刚发生过一次中断一样。一旦这个新创建任务的优先级在就绪队列中是最高的，RTOS就会从其堆栈中弹出其入口地址开始执行。有一个疑问是，不使用RTOS，而是简单使用一个主循环在程序中调用各个函数模块，一样可以实现软件的调度执行。那么，这种常用的方法与使用RTOS相比有什么区别呢？其实，使用主循环的方法不过是一种没有优先级的顺序执行的调度策略而已。这种方法的缺点在于，主循环中调用的各个函数是顺序执行的，那么，即使是一个无关紧要的函数（比如闪烁一个LED），只要他不主动返回，也会一直执行直到结束，这时，如果发生一个重要的事件（比如DMA buffer full 中断)，就会得不到及时的响应和处理，只能等到那个闪烁LED的函数执行完毕。这样就使整个DSP处理的优先次序十分不合理。而在使用了RTOS之后，当一个重要的事件发生时，中断处理会进入RTOS，并调用scheduler,这时scheduler 会让处理这一事件的任务抢占DSP处理器（因为它的优先级高）。而哪个闪烁LED任务即使晚执行几毫秒都没任何影响。这样整个DSP的调度策略就十分合理。RTOS要说的内容太多，我只能讲一下自己的一点体会吧DSP与正（余）弦波在DSP的应用中，我们经常要用到三角函数，或者合成一个正（余）弦波。这是因为我们喜欢把信号通过傅立叶变换映射到三角函数空间来理解信号的频率特性。信号处理的一些计算技巧都需要在DSP软件中进行三角函数计算。然而三角函数计算是非线性的计算，DSP并没有专门的指令来求一个数的正弦或余弦。于是我们需要用线性方法来近似求解。一个直接的想法是用多项式拟合，这也正是大多数DSP C编译器提供正余弦库函数所采用的方法。其原理是把三角函数向函数空间{1，x,x^2,x^3….}上投影，从而获得一系列的系数，用这些系数就可以拟合出三角函数。比如，我们在[0，pi/2]区间上拟合sin,只需在matlab中输入以下命令：x=0:0.05:pi/2;p=polyfit(x,sin(x),5)就得到5阶的多项式系数：p =0.00581052047605 0.00580963216172 -0.171938656853600.00209002716293 0.99969270087312 0.00000809543448于是在[0，pi/2]区间上：sin(x)= 0.00000809543448+0.99969270087312x+ 0.00209002716293x^2-0.17193865685360*x^3+0.005809632161 72x^4+0.00581052047605x^5于是在DSP程序中，我们可以通过用乘加（MAC）指令计算这个多项式来近似求得sin(x)当然如果用定点DSP还要把P这个多项式系数表用一定的Q值来改写成定点数。这样的三角函数计算一般都需要几十个cycle 的开销。这对于某些场合是不能容忍的。另一种更快的方法是借助于查表，比如，我们将[0，pi/2]分成32个区间，每个区间长度就为pi/64,在每个区间上我们使用直线段拟合sin曲线，每个区间线段起点的正弦值和线段斜率事先算好，存在RAM里，这样就需要在在RAM里存储64个常数：32个起点的精确的正弦值（事先算好）： s[32]={0,sin(pi/64),sin(pi/32),sin(pi/16)….}32个线段的斜率： f[32]={0.049,…..}对于输入的每一个x,先根据其大小找到所在区间i，通常x用定点表示，一般取其高几位就是系数i了，然 后通过下式即可求出sin(x)：sin(x)= s[i]*f[i]这样一般只需几个CYCLE就可以算出正弦值，如果需要更高的精度，可以将区间分得更细，当然，也就需 要更多的RAM去存储常数表。事实上，不仅三角函数，其他的各种非线性函数都是这样近似计算的。以上信息源于ickey网站技术 软件系统RTOS特点CEVA DSP特点","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"setup RaspberryPi","slug":"setup-RaspberryPi","date":"2017-11-14T14:46:29.000Z","updated":"2017-11-14T15:02:19.664Z","comments":true,"path":"2017/11/14/setup-RaspberryPi/","link":"","permalink":"http://calmtree.cn/2017/11/14/setup-RaspberryPi/","excerpt":"树莓派 重新扫灰前段时间，因为TF卡突然出现故障，树莓派down机了，上面的资料都没有恢复出来（哭），，，，这次准备重新开场！后面考虑TF+U盘的机制。防止内存卡再出故障","text":"树莓派 重新扫灰前段时间，因为TF卡突然出现故障，树莓派down机了，上面的资料都没有恢复出来（哭），，，，这次准备重新开场！后面考虑TF+U盘的机制。防止内存卡再出故障 setup 过程记录一下，给自己，也给需要的同行们，省点精力 1. Down right image，burn to SD(stretch_lite版,简书) 2. Enable ssh：create ssh file 3. Ipscan，发现树莓派IP 4. 启用root，并设置密码：sudo passwd root，编辑:/etc/ssh/sshd_config PermitRootLogin一行为yes 5. vi /etc/dhcpcd.conf：配置静态IP，配置网关，路由 6. 更改apt源 修改 sources.list 将 mirrordirector.raspbian.org 替换为 mirrors.aliyun.com/raspbian/ 。 修改 raspi.list 实际修改是，将 archive.raspberrypi.org 替换为 mirrors.aliyun.com 然后执行 apt-get update &amp;&amp; apt-get upgrade -y 7. 安装图形界面 pixel/GUI 8. 安装远程图形界面：apt-get install xrdp 9. 配置samba（利用这个装花生壳） 10. 配置花生壳客户端/配置内网穿透 11. 配置数据库服务","categories":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"扯扯NB-IOT","slug":"扯扯NB-IOT","date":"2017-11-08T13:13:40.000Z","updated":"2017-11-08T14:02:08.509Z","comments":true,"path":"2017/11/08/扯扯NB-IOT/","link":"","permalink":"http://calmtree.cn/2017/11/08/扯扯NB-IOT/","excerpt":"今年是AI技术大爆发元年，但通信领域也不甘寂寞，物联网技术经过一段时间的累计，从需求侧开始撬动研发投入。NB-IOT就是典型的例子之一。","text":"今年是AI技术大爆发元年，但通信领域也不甘寂寞，物联网技术经过一段时间的累计，从需求侧开始撬动研发投入。NB-IOT就是典型的例子之一。 事实上，本文并不打算详细论述NB-IOT的各个细节。下面分享几张对理解NB能起到关键引导的几张图 NB-IOT的3种布网模式三种布局模式对于终端物理层而言，基本上没什么区别，不过RF特性会有所不同。 下行基本工作时序遵守NPDCCH+NPDSCH+重传的模式 上行基本工作时序也是NPDCCH+NPUSCH+重复传输，不过由于需要终端跟网络侧对齐timing，因此跟下行稍稍有区别的是，连续发送久了，需要进入下行接收同步GAP。 深刻理解了上面两个图，思考一下背后的因素，会发现什么？ 半双工！不同于传统的LTE，在NB中，通信按照半双工的方式进行，同一时刻只有DL或者UP，NPDCCH需要占用一个TTI。这样对于NPDCCH的监听而言，则有了新的需求： NB中的新招式 NB中新的资源布局3.75K子载波，对于NB中最大的更新，个人觉得莫过于上行3.75K子载波的工作方式。这个子载波格式的引入，对于上行发送的资源分配方式，信号生成复杂性都带来了新的麻烦。而对于接收端，则更具有挑战性，或许这也是网络迟迟不更新，代价比预想的高出许多的因素之一。 NB 的竞争者事实上，NB才是后来的，被幕后各种推手推动。在此之前有不少类似的技术，zigbee，sogfix，Lora都能提供类似的覆盖和功能。对于非授权频段，以及企业私有网，Lora的竞争力不容忽视，后面有空再掰掰Lora。 本着分享的精神，本文最后分享一张实际项目中使用得着的设计详图.经过实际项目验证：按照下图，实现NB的发送链路完全没有问题。拿去不谢！","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://calmtree.cn/tags/技术/"}]},{"title":"嗯，基本会了","slug":"嗯，基本会了","date":"2017-11-07T14:47:01.000Z","updated":"2017-11-07T14:48:48.876Z","comments":true,"path":"2017/11/07/嗯，基本会了/","link":"","permalink":"http://calmtree.cn/2017/11/07/嗯，基本会了/","excerpt":"要图有图，基本上可以应付日常需要，不要为此特意付出更多精力了。","text":"要图有图，基本上可以应付日常需要，不要为此特意付出更多精力了。","categories":[],"tags":[]},{"title":"拔草","slug":"拔草","date":"2017-11-07T14:35:44.000Z","updated":"2017-11-07T14:42:58.785Z","comments":true,"path":"2017/11/07/拔草/","link":"","permalink":"http://calmtree.cn/2017/11/07/拔草/","excerpt":"心痒痒GitHub的blog很久了，终于进来拔草，hoho，来个图镇楼！","text":"心痒痒GitHub的blog很久了，终于进来拔草，hoho，来个图镇楼！","categories":[],"tags":[]},{"title":"2017完成书单","slug":"2017完成书单","date":"2017-11-05T12:35:27.000Z","updated":"2017-11-08T14:16:13.070Z","comments":true,"path":"2017/11/05/2017完成书单/","link":"","permalink":"http://calmtree.cn/2017/11/05/2017完成书单/","excerpt":"时间简史（插图本） 微信读书 感觉一般般，不如后面的“宇宙的琴弦” 宇宙的琴弦[PDF] 弦理论科普著作 B.格林 著 李泳 译 弦理论好书 看的好烧脑","text":"时间简史（插图本） 微信读书 感觉一般般，不如后面的“宇宙的琴弦” 宇宙的琴弦[PDF] 弦理论科普著作 B.格林 著 李泳 译 弦理论好书 看的好烧脑 3.荒原狼 赫尔曼.黑塞 太难度，实在读不下去，放弃。 世界上最简单的会计书 微信读书 鞋狗 微信读书 创客.新工业革命 [多看] 克里斯.安德森 好书，恨不得一口气读完 你从未真正拼过[微信读书] 领英 乡土中国【pdf已读】费孝通/著 北京大学出版社/上海人民出版社 很好！有思想有内涵 史记（蔡志忠版）多看 小人书，推荐给小朋友看不错 极简欧洲史 澳 约翰.赫斯特 译者:席玉苹 [多看] 一般 人民的名义 周梅森 [PDF] 一般 看见 柴静 微信读书 内容不是非常正能量，看到近1/3放弃摘录： 不要因为走得太远，忘了我们为什么出发（陈虻 meng 第二声） 13.Python 灰帽子中文，，看到第6章，逐渐看不懂，先停下来 Python编程快速上手 让繁琐工作自动化 [PDF] [美].AI Sweigart 王海鹏.译 不错，上手Python首选 ARDUINO程序设计基础【PDF】 陈吕洲","categories":[{"name":"学习","slug":"学习","permalink":"http://calmtree.cn/categories/学习/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://calmtree.cn/tags/生活/"}]},{"title":"图片show","slug":"图片show","date":"2017-11-05T11:36:55.000Z","updated":"2017-11-05T14:34:27.666Z","comments":true,"path":"2017/11/05/图片show/","link":"","permalink":"http://calmtree.cn/2017/11/05/图片show/","excerpt":"试试","text":"试试 姐弟好啊","categories":[],"tags":[]}]}